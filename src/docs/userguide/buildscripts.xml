<chapter id='cha:gradle_core_tutorial' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>The Gradle Core Tutorial</title>
    <para>If you execute a build, Gradle normally looks for a file called
        <literal>build.gradle</literal>
        in the current directory (There are command line switches to change this behavior. See Appendix<xref
                linkend='cha:command_line'/>). We call the build.gradle a build script. Although strictly speaking it is
        a build configuration script, as we see later. In Gradle the location of the build script file defines a
        project. The name of the directory containing the build script is the name of the project.
    </para>
    <section>
        <title>Hello World</title>
        <para>In Gradle everything revolves around tasks. The tasks for your build are defined in the build script. To
            try this out, create the following build script named<literal>build.gradle</literal>.
        </para>
        <sample src='userguide/tutorial/hello/build.gradle' title='Sample userguide/tutorial/hello/build.gradle'/>
        <para>Enter with your shell into the containing directory and execute the build script
            <footnote>
                <para>Every code sample in this chapter can be found in the
                    <literal>samples</literal>
                    dir of your Gradle distribution. The output box always denotes the directory name relative to the
                    <literal>samples</literal>
                    dir.
                </para>
            </footnote>
            <footnote>
                <para>The scripts are executed with the
                    <literal>-q</literal>
                    options which suppresses the Gradle logging.
                </para>
            </footnote>
            :
        </para>
        <sampleOutput src='hello.out'/>
        <para>If you think this looks damn similar to Ant's targets, well, you are right. Gradle tasks are the
            equivalent to Ant targets. But as you will see, they are much more powerful. We have used a different
            terminology to Ant as we think the word 'task' is more expressive than the word 'target'. Unfortunately this
            introduces a terminology clash with Ant, as Ant calls its commands, like
            <literal>javac</literal>
            or<literal>copy</literal>, task. So if we talk about tasks, we
            <emphasis>always</emphasis>
            mean Gradle tasks, which are the equivalent to Ant's targets. If we talk about Ant tasks (Ant commands), we
            explicitly say
            <emphasis>ant</emphasis>
            task.
        </para>
    </section>
    <section>
        <title>Build scripts are code</title>
        <para>Gradles build scripts expose to you the full power of Groovy. As an appetizer, have a look at this:
        </para>
        <sample src='userguide/tutorial/upper/build.gradle' title='Sample userguide/tutorial/upper/build.gradle'/>
        <sampleOutput src='upper.out'/>
        <para>or
        </para>
        <sample src='userguide/tutorial/count/build.gradle' title='Sample userguide/tutorial/count/build.gradle'/>
        <sampleOutput src='count.out'/>
    </section>
    <section id='sec:task_dependencies'>
        <title>Task dependencies</title>
        <para>As you probably have guessed, you can declare dependencies between your tasks.
        </para>
        <sample src='userguide/tutorial/intro/build.gradle' title='Sample userguide/tutorial/intro/build.gradle'/>
        <sampleOutput src='intro.out'/>
        <para>To add a dependency, the corresponding task does not need to exist.
        </para>
        <sample src='userguide/tutorial/lazyDependsOn/build.gradle'
                title='Sample userguide/tutorial/lazyDependsOn/build.gradle'/>
        <sampleOutput src='lazyDependsOn.out'/>
        <para>The dependency of
            <literal>taskX</literal>
            to
            <literal>taskY</literal>
            is declared before
            <literal>taskY</literal>
            is created. This is very important for multi-project builds. Task dependencies are discussed in more detail
            in section<xref linkend='sec:adding_dependencies_to_tasks'/>.
        </para>
    </section>
    <section>
        <title>Dynamic tasks</title>
        <para>The power of Groovy can not only be used inside the tasks. You can use it for example to dynamically
            create tasks.
        </para>
        <sample src='userguide/tutorial/dynamic/build.gradle' title='Sample userguide/tutorial/dynamic/build.gradle'/>
        <sampleOutput src='dynamic.out'/>
    </section>
    <section>
        <title>Manipulating existing tasks</title>
        <para>Once tasks are created they can be accessed via an<emphasis>API</emphasis>. This is different to Ant. For
            example you can create additional dependencies.
        </para>
        <sample src='userguide/tutorial/dynamicDepends/build.gradle'
                title='Sample userguide/tutorial/dynamicDepends/build.gradle'/>
        <sampleOutput src='dynamicDepends.out'/>
        <para>Or you can add behavior to an existing task.
        </para>
        <sample src='userguide/tutorial/helloEnhanced/build.gradle'
                title='Sample userguide/tutorial/helloEnhanced/build.gradle'/>
        <sampleOutput src='helloEnhanced.out'/>
        <para>The calls
            <literal>doFirst</literal>
            and
            <literal>doLast</literal>
            can be executed multiple times. What they do is to add an action to the beginning or the end of the tasks
            actions list.
        </para>
    </section>
    <section>
        <title>Shortcut notations</title>
        <para>There is a convenient notation for accessing
            <emphasis>existing</emphasis>
            tasks.
        </para>
        <sample src='userguide/tutorial/helloWithShortCut/build.gradle'
                title='Sample userguide/tutorial/helloWithShortCut/build.gradle'/>
        <sampleOutput src='helloWithShortCut.out'/>
        <para>This enables very readable code. Especially when using the out of the box tasks provided by the plugins
            (e.g.<literal>compile</literal>).
        </para>
    </section>
    <section id='sec:dynamic_properties'>
        <title>Dynamic Task Properties</title>
        <para>You can assign arbitrary
            <emphasis>new</emphasis>
            properties to any task.
        </para>
        <sample src='userguide/tutorial/dynamicProperties/build.gradle'
                title='Sample userguide/tutorial/dynamicProperties/build.gradle'/>
        <sampleOutput src='dynamicProperties.out'/>
    </section>
    <section>
        <title>Ant</title>
        <para>Let's talk a little bit about Gradles Ant integration. Ant can be divided into two layers. The first layer
            is the Ant language. It contains the syntax for the build.xml, the handling of the targets, special
            constructs like macrodefs, etc. Basically everything except the Ant tasks and types. Gradle does not offer
            any special integration for this first layer. Of course you can in your build script execute an Ant build as
            an external process. Your build script may contain statements like:
            <literal>"ant clean compile".execute()</literal>
            <footnote>
                <para>In Groovy you can execute Strings. To learn more about executing external processes with Groovy
                    have a look in GINA 9.3.2 or at the Groovy wiki
                </para>
            </footnote>
            .
        </para>
        <para>The second layer of Ant is its wealth of Ant tasks and types, like<literal>javac</literal>,
            <literal>copy</literal>
            or<literal>jar</literal>. For this layer Gradle provides excellent integration simply by relying on Groovy.
            Groovy is shipped with the fantastic<literal>AntBuilder</literal>. Using Ant tasks from Gradle is as
            convenient and more powerful than using Ant tasks from a
            <literal>build.xml</literal>
            file. Let's look at an example:
        </para>
        <sample src='userguide/tutorial/antChecksum/build.gradle'
                title='Sample userguide/tutorial/antChecksum/build.gradle'/>
        <sampleOutput src='antChecksum.out'/>
        <para>In your build script, a property called
            <literal>ant</literal>
            is provided by Gradle. It is a reference to an instance of Groovys AntBuilder. The AntBuilder is used the
            following way:
        </para>
        <itemizedlist>
            <listitem>
                <para>Ant task names corresponds to AntBuilder method names.
                </para>
            </listitem>
            <listitem>
                <para>Ant tasks attributes are arguments for this methods. The arguments are passed in from of a map.
                </para>
            </listitem>
            <listitem>
                <para>Nested Ant tasks corresponds to method calls of the passed closure.
                </para>
            </listitem>
        </itemizedlist>
        <para>To learn more about the Ant Builder have a look in GINA 8.4 or at the Groovy Wiki
        </para>
    </section>
    <section>
        <title>Using methods</title>
        <para>Gradle scales in how you can organize your build logic. The first level of organizing your build logic for
            the example above, is extracting a method.
        </para>
        <sample src='userguide/tutorial/antChecksumWithMethod/build.gradle'
                title='Sample userguide/tutorial/antChecksumWithMethod/build.gradle'/>
        <sampleOutput src='antChecksumWithMethod.out'/>
        <para>Later you will see that such methods can be shared among subprojects in multi-project builds. If your
            build logic becomes more complex, Gradle offers you other very convenient ways to organize it. We have
            devoted a whole chapter to this. See Chapter<xref linkend='cha:organizing_build_logic'/>.
        </para>
    </section>
    <section id='sec:default_tasks'>
        <title>Default Tasks</title>
        <para>Gradle allows you to define one ore more default tasks for your build.
        </para>
        <sample src='userguide/tutorial/defaultTasks/build.gradle'
                title='Sample userguide/tutorial/defaultTasks/build.gradle'/>
        <sampleOutput src='defaultTasks.out'/>
        <para>This is equivalent to running<literal>gradle clean run</literal>. In a multi-project build every
            subproject can have its own specific default tasks. If a subproject does not specify default tasks, the
            default tasks of the parent project are used (if defined).
        </para>
    </section>
    <section>
        <title>Configure By DAG</title>
        <para>As we describe in full detail later (See chapter<xref linkend='cha:the_build_lifecycle'/>) Gradle has a
            configuration phase and an execution phase. After the configuration phase Gradle knows all tasks that should
            be executed. Gradle offers you a hook to make use of this information. A usecase for this would be to check
            if the release task is part of the tasks to be executed. Depending on this you can assign different values
            to some variables.
        </para>
        <sample src='userguide/tutorial/configByDag/build.gradle'
                title='Sample userguide/tutorial/configByDag/build.gradle'/>
        <sampleOutput src='configByDag.out'/>
        <para>The important thing is, that the fact that the release task has been choosen, has an effect
            <emphasis>before</emphasis>
            the release task gets executed. Nor has the release task to be the
            <emphasis>primary</emphasis>
            task (i.e. the task passed to the
            <literal>gradle</literal>
            command).
        </para>
    </section>
    <section>
        <title>Summary</title>
        <para>This is not the end of the story for tasks. So far we have worked with simple tasks. Tasks will be
            revisited in chapter
            <xref linkend='cha:more_about_tasks'/>
            and when we look at the Java Plugin in chapter<xref linkend='cha:the_java_plugin'/>.
        </para>
    </section>
</chapter>
