<chapter id='cha:the_java_projects_tutorial' xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>The Java Projects Appetizer</title>
    <para>We have in-depth coverage with many examples about the Java plugin, the dependency management and
        multi-project builds in the later chapters. In this chapter we want to give you just a first idea.
    </para>
    <section id='sec:examples'>
        <title>Examples</title>
        <para>Provided your build script contains the single line
        </para>
        <programlisting><![CDATA[
usePlugin('java')
]]></programlisting>
        <para>Executing
            <literal>gradle libs</literal>
            will compile, test and jar your code. If you specify a remote repository, executing
            <literal>gradle uploadLibs</literal>
            will do additionally an upload of your jar to a remote repository. Builds have usually more requirements.
            Let's look at a typical multi-project build.
        </para>
        <programlisting><![CDATA[
D- ultimateApp
  D- api
  D- webservice
  D- shared
]]></programlisting>
        <para>We have three projects.
            <literal>api</literal>
            is shipped to the client to provide them a Java client for your XML webservice.
            <literal>webservice</literal>
            is a webapp which returns XML.
            <literal>shared</literal>
            is code used both by
            <literal>api</literal>
            and <literal>webservice</literal>. Let's look at the Gradle build scripts of those projects.
        </para>
        <programlisting><![CDATA[
subprojects {
    manifest.mainAttributes([
	    'Implementation-Title': 'Gradle',
		'Implementation-Version': '0.1'
	])
	dependencies {
		compile "commons-lang:commons-lang:3.1"
		testCompile "junit:junit:4.4"
	}
	sourceCompatibility = 1.5
	targetCompatibility = 1.5
	test {
	    include '**/*Test.class'
	    exclude '**/Abstract*'
	}
}
]]></programlisting>
        <para>The commons stuff for all Java projects we do define in the root project. Not by inheritance but via
            <emphasis>Configuration Injection</emphasis>. The root project is like a container and
            <literal>subprojects</literal>
            iterates over the elements of this container and injects the specified configuration. This way we can easily
            define the manifest content for all archives.
        </para>
        <programlisting><![CDATA[
dependencies {
	compile "commons-httpclient:commons-httpclient:3.1", project(":shared")
}

dists {
	zip() {
		files(dependencies.resolve("runtime")) // add dependencies to zip
		fileset(dir: "path/distributionFiles")
	}
}
]]></programlisting>
        <para>In the
            <literal>api</literal>
            build script we add further dependencies. One dependency are the jars of the
            <literal>shared</literal>
            project. Due to this dependency
            <literal>shared</literal>
            gets now always build before <literal>api</literal>. We also add a distribution, that gets shipped to the
            client.
        </para>
    </section>
</chapter>
