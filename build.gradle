import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.jar.Attributes
import org.gradle.api.internal.dependencies.WebdavResolver
import org.gradle.api.tasks.testing.ForkMode
import org.gradle.api.tasks.wrapper.Wrapper
import org.gradle.build.integtests.*
import org.gradle.build.release.Svn
import org.gradle.build.release.Version
import org.gradle.build.samples.WrapperProjectCreator
import org.gradle.build.startscripts.StartScriptsGenerator
import org.gradle.execution.Dag
import org.gradle.util.GradleVersion
import org.apache.ivy.core.module.descriptor.Configuration
import org.apache.ivy.core.module.descriptor.Configuration.Visibility
import groovy.text.SimpleTemplateEngine
import org.gradle.api.tasks.StopExecutionException

archivesBaseName = 'gradle'
usePlugin('groovy')

sourceCompatibility = 1.5
targetCompatibility = 1.5

svn = new Svn(project)
distributionUploadUrl = null
userguideRemoteDir = 'userguide/'
javadocRemoteDir = 'api/'

type = 'jar'
version = new Version(svn, project, false)
group = 'org.gradle'
buildTime = new Date()
versionModifier = null

webSrcDir = new File("$srcRoot", 'website')

configureByDag = {Dag dag ->
    if (dag.hasTask(':release')) {
        versionModifier = ''
        distributionUploadUrl = 'https://dav.codehaus.org/dist/gradle'
        userguideRemoteDir += 'release'
        javadocRemoteDir += 'release'
    } else {
        versionModifier = new SimpleDateFormat('yyMMddHHmmssZ').format(buildTime)
        distributionUploadUrl = 'https://dav.codehaus.org/snapshots.dist/gradle'
        userguideRemoteDir += 'latest'
        javadocRemoteDir += 'latest'
    }
    manifest.mainAttributes([
            (Attributes.Name.CLASS_PATH.toString()): dependencies.resolve('runtime').inject('') {
                path, file -> path + file.name + ' '
            },
            (Attributes.Name.IMPLEMENTATION_TITLE.toString()): 'Gradle',
            (Attributes.Name.IMPLEMENTATION_VERSION.toString()): version.toString()
    ])
}

dependencies {
    // todo: Improve dependency handling for xUnit jars
    addConfiguration(new Configuration('distLib', Visibility.PRIVATE, null, ['default'] as String[], true, null))
    addConfiguration('ftpAntTask')

    clientModule(['ftpAntTask'], ":ant-commons-net:1.7.0") {
        clientModule(":commons-net:1.4.1") {
            dependencies(":oro:2.0.8@jar")
        }
    }
    clientModule(['groovy'], ":groovy-all:1.5.5") {
        dependency(":commons-cli:1.0")
        clientModule(":ant:1.7.0") {
            dependencies(":ant-junit:1.7.0@jar", ":ant-launcher:1.7.0")
        }
    }
    
    clientModule(['compile'], ":commons-httpclient:3.0") {
        dependencies(":commons-codec:1.2", ":commons-logging:1.0.3")
    }

    dependency(['runtime'], ":ant-junit:1.7.0") {
        exclude(module: 'junit')
    }
    compile ":logback-classic:0.9.8",
            ":slf4j-api:1.4.3",
            ":logback-core:0.9.8",
            ":commons-io:1.3.1@jar",
            ":commons-lang:2.3@jar",
            ":webdavlib:2.0",
            ":logback-classic:0.9.8",
            ":ivy:2.0.0.beta2_20080305165542@jar"
    runtime ":ant-launcher:1.7.0",
            ":ant-nodeps:1.7.0",
            ":junit:4.4"

    testCompile ":junit:4.4"
    distLib ":junit:4.4"
    addFlatDirResolver('lib', new File(rootDir, 'lib'))
}

resources.doLast {
    logger.info('Write version properties')
    Properties versionProperties = new Properties()
    versionProperties.putAll([
            (GradleVersion.VERSION): version.toString(),
            (GradleVersion.BUILD_TIME): DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL).format(buildTime)
    ])
    versionProperties.store(new FileOutputStream(new File(classesDir, GradleVersion.FILE_NAME)), '')
}

test {
    include '**/*Test.class'
    exclude '**/Abstract*'
    // We set forkmode to ONCE as our tests are written in Groovy and the startup time of Groovy is significant.
    options.fork(forkMode: ForkMode.ONCE, jvmArgs: ["-ea", "-Dgradle.home=roadToNowhere"])
}

explodedDistDir = new File(distsDir, 'exploded')
explodedDistDocsDir = new File(explodedDistDir, 'docs')
explodedDistJavadocsDir = new File(explodedDistDocsDir, 'javadoc')
explodedDistSamplesDir = new File(explodedDistDir, 'samples')
explodedDistUserguideOutputDir = new File(explodedDistSamplesDir, 'userguideOutput')

createTask('explodedDist', dependsOn: ['libs', 'userguide', 'javadoc']) {
    [explodedDistDir, explodedDistSamplesDir]*.mkdirs()
    File explodedDistBinDir = mkdir(explodedDistDir, 'bin')
    File explodedDistSrcDir = mkdir(explodedDistDir, 'src')
    File explodedDistLibDir = mkdir(explodedDistDir, 'lib')
    ant {
        logger.info('Generate lib dir')
        dependencies.resolve('distLib').each {File file ->
            copy(file: file, todir: explodedDistLibDir)
        }
        jar(destfile: new File(explodedDistLibDir, "$archivesBaseName-wrapper-${version}.jar"),
                basedir: classesDir, includes: 'org/gradle/wrapper/')
        // todo: find out why Ivy does not include the jar in the resolve
        copy(file: task('gradle_jar').archivePath, toDir: explodedDistLibDir)
        logger.info('Generate start scripts')
        StartScriptsGenerator.generate("$archivesBaseName-${version}.jar", explodedDistBinDir, archivesBaseName)
        logger.info('Generate and copy samples.')
        WrapperProjectCreator.createProject(explodedDistSamplesDir, task('gradle_bin_zip').archivePath.parentFile,
                version.toString())
        copy(toDir: explodedDistSamplesDir) {fileset(dir: new File(srcRoot, 'samples'))}
        logger.info('Copy binary sources.')
        copy(toDir: explodedDistSrcDir) {
            (srcDirs + resourceDirs + groovySrcDirs).findAll {it.isDirectory()}.each {dir -> fileset(dir: dir)}
        }
        logger.info('Copy and generate top level files.')
        copy(toDir: explodedDistDir) {fileset(dir: new File(srcRoot, 'toplevel'))}
        String gettingStartedContent = new File(srcDocsDir, 'getting-started.html').text
        new File(explodedDistDir, 'getting-started.html').text =
            new SimpleTemplateEngine().createTemplate(new File(srcDocsDir, 'distGettingStartedSkeleton.html')).make(content: gettingStartedContent).toString()
        // Set permissions (important for running integration tests against the exploded dist)
        chmod(dir: "$explodedDistDir/bin", perm: "ugo+rx", includes: "**/*")
    }
}

zipRootFolder = "$archivesBaseName-${-> version}"

dists {
    dependsOn 'explodedDist'
    childrenDependsOn = 'explodedDist'
    zip(classifier: 'all').afterDag {
        zipFileSet(dir: explodedDistDir, prefix: zipRootFolder) {
            exclude 'bin/*'
        }
        zipFileSet(dir: explodedDistDir, prefix: zipRootFolder, fileMode: '775') {
            include 'bin/*'
            exclude 'bin/*.*'
        }
        zipFileSet(dir: explodedDistDir, prefix: zipRootFolder) {
            include 'bin/*.*'
        }
    }
    zip(classifier: 'bin').afterDag {
        zipFileSet(dir: explodedDistDir, prefix: zipRootFolder) {
            exclude 'bin/*'
            exclude 'src/'
            exclude 'samples/'
        }
        zipFileSet(dir: explodedDistDir, prefix: zipRootFolder, fileMode: '775') {
            include 'bin/*'
            exclude 'bin/*.*'
        }
        zipFileSet(dir: explodedDistDir, prefix: zipRootFolder) {
            include 'bin/*.*'
        }
    }
    zip(classifier: 'src').afterDag {
        destinationDir = distsDir
        zipFileSet(dir: projectDir, prefix: archiveName, fileMode: '775') {
            include 'gradlew'
        }
        zipFileSet(dir: projectDir, prefix: archiveName) {
            include 'buildSrc/', 'gradle-wrapper/', 'lib/', 'src/', 'gradle.properties', 'gradlefile', 'gradlew.bat'
        }
    }
}

javadoc.destinationDir = explodedDistJavadocsDir
createTask('uploadJavadoc', dependsOn: 'javadoc') {
    ftp(action: 'mkdir', remotedir: javadocRemoteDir)
    ftp(action: 'delete', remotedir: javadocRemoteDir) {
        fileset() {include(name: '**/*.html')}
    }
    // todo: Ant ftp hangs sometimes. We might switch to platform ftp. 
    // The passive = true is an attempt to improve this. Yet it sometimes takes
    ftp(action: 'send', remotedir: javadocRemoteDir, passive: true) {
        fileset(dir: javadoc.destinationDir)
    }
}

userguideDir = dir("$buildDir.name/$docsDir.name/userguide")

createTask('userguide', dependsOn: [userguideDir]) {
    File userguideSrc = new File(srcDocsDir, 'userguide')
    File userguideData = mkdir(userguideDir.dir, 'data')
    new File(userguideData, 'version.tex').write(version.toString())
    ant {
        if (!isLatexInstalled()) {
            throw new StopExecutionException('Latex is not installed. We skip the userguide!')
        }
        cleanLatex(userguideSrc)
        3.times {
            exec(output: userguideDir.toString() + '/pdfOut', executable: 'pdflatex', dir: userguideSrc) {
                arg(line: "master.tex")
            }
        }
        copy(file: new File(userguideSrc, 'master.pdf'), tofile: new File(explodedDistDocsDir, 'pdf/userguide.pdf'))
        cleanLatex(userguideSrc)
        3.times {
            exec(output: userguideDir.toString() + '/htmlOut', executable: 'htlatex', dir: userguideSrc) {
                arg(line: "master.tex")
            }
        }
        copy(file: new File(userguideSrc, 'master.html'), tofile: new File(explodedDistDocsDir, 'html_single/userguide.html'))
        cleanLatex(userguideSrc)
        3.times {
            exec(output: userguideDir.toString() + '/htmlSingleOut', executable: 'htlatex', dir: userguideSrc) {
                arg(line: "master.tex \"html,2\"")
            }
        }
        copy(todir: new File(explodedDistDocsDir, 'html')) {
            fileset(dir: userguideSrc, includes: '*.html')
        }
        cleanLatex(userguideSrc)
    }
}

boolean isLatexInstalled() {
    try {
        ant.exec(output: userguideDir.toString() + '/findLatexOut', executable: 'pdflatex', dir: projectDir) {
            arg(line: "-help")
        }
    } catch (Throwable e) {
        return false
    }
    true
}

void cleanLatex(File dir) {
    ant.delete() {
        fileset(dir: dir, includes: "*.aux, *.lg, *.tmp, *.html, *.pdf, *.log, *.dvi, *.css, *.fdb_latexmk, *.idv, *.toc, *.xref, *.4ct, *.4tc, *.out")
    }
}

createTask('uploadUserguide', dependsOn: 'userguide') {
    ftp(action: 'mkdir', remotedir: userguideRemoteDir)
    ftp(action: 'delete', remotedir: userguideRemoteDir) {
        fileset() {
            include(name: '*.html')
        }
    }
    ftp(action: 'send', remotedir: userguideRemoteDir) {
        fileset(dir: new File(explodedDistDocsDir, 'html'))
        fileset(dir: new File(explodedDistDocsDir, 'pdf')) {
            include(name: 'userguide.pdf')
        }
    }
}

// The integtests depend on dists because of the wrapper test
createTask('integTest', dependsOn: ['dists']) {
    IntegTestSuite.execute(explodedDistDir.absolutePath, explodedDistSamplesDir.absolutePath, explodedDistUserguideOutputDir.absolutePath)
}.skipProperties

createTask('nightlyBuild', dependsOn: ['integTest', 'uploadJavadoc'])

createTask('install', dependsOn: 'integTest') {
    String installDirName = archivesBaseName + '-SNAPSHOT'
    ant {
        delete(dir: "$installDir/$installDirName")
        exec(dir: installDir, executable: "rm") {
            arg(value: archivesBaseName)
        }
        exec(dir: installDir, executable: "unzip") {
            arg(value: '-q')
            arg(value: '-d')
            arg(value: installDir)
            arg(value: "${task('gradle_all_zip').archivePath}")
        }
        exec(dir: installDir, executable: "mv") {
            arg(value: zipRootFolder)
            arg(value: installDirName)
        }
        exec(dir: installDir, executable: "ln") {
            arg(value: '-s')
            arg(value: "$installDir/$installDirName")
            arg(value: archivesBaseName)
        }
    }
}

uploadDists {
    dependsOn 'integTest'
}.doFirst {
    it.uploadResolvers.add(new WebdavResolver()) {
        name = 'gradleReleases'
        user = codehausUserName
        userPassword = codehausUserPassword
        addArtifactPattern("$distributionUploadUrl/[artifact]-[revision](-[classifier]).[ext]" as String)
    }
}

createTask('release', dependsOn: ['uploadDists', 'uploadUserguide', 'uploadJavadoc']) {
    svn.release()
}

createTask('wrapper', type: Wrapper).configure {
    gradleVersion = '0.1.5-080613181139+0200'
}



void ftp(Map args, Closure antFileset = {}) {
    ant {
        taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: dependencies.resolve('ftpAntTask').join(':'))
        Map ftpArgs = args + [
                server: 'www.gradle.org',
                userid: websiteFtpUserName,
                password: websiteFtpUserPassword
        ]
        delegate.ftp(ftpArgs) {
            antFileset.delegate = delegate
            antFileset()
        }
    }
}

//createTask('check') {
//    ant.taskdef(resource: 'org/apache/ivy/ant/antlib.xml')
//    ant.cachepath(organisation: "net.sourceforge.cobertura", module: "cobertura", revision: "1.9",
//            inline: "true", conf: "default", pathid: "cobertura.classpath")
//}




